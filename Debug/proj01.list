
proj01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000330  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init         00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  20000000  20000000  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY
  6 .debug_line   000001bc  00000000  00000000  00010360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000026  00000000  00000000  0001051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000014  00000000  00000000  00010542  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000020  00000000  00000000  00010558  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000053  00000000  00000000  00010578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	20002000 	.word	0x20002000
 8000004:	08000021 	.word	0x08000021
 8000008:	08000057 	.word	0x08000057
 800000c:	08000057 	.word	0x08000057
 8000010:	20000000 	.word	0x20000000
 8000014:	20000000 	.word	0x20000000
 8000018:	20000000 	.word	0x20000000
 800001c:	20000000 	.word	0x20000000

08000020 <Reset_Handler>:

/* reset handler */
.section .text
Reset_Handler:
	/* set stack pointer */
	ldr r0, =_estack
 8000020:	48a3      	ldr	r0, [pc, #652]	; (80002b0 <delay+0xe>)
	mov sp, r0
 8000022:	4685      	mov	sp, r0

	/* initialize data and bss
	 * not necessary for rom only code
	 * */
	bl init_data
 8000024:	f000 f803 	bl	800002e <init_data>
	/* call main */
	bl main
 8000028:	f000 f816 	bl	8000058 <main>
	/* trap if returned */
	b .
 800002c:	e7fe      	b.n	800002c <Reset_Handler+0xc>

0800002e <init_data>:
/* initialize data and bss sections */
.section .text
init_data:

	/* copy rom to ram */
	ldr r0, =_sdata
 800002e:	48a1      	ldr	r0, [pc, #644]	; (80002b4 <delay+0x12>)
	ldr r1, =_edata
 8000030:	49a1      	ldr	r1, [pc, #644]	; (80002b8 <delay+0x16>)
	ldr r2, =_sidata
 8000032:	4aa2      	ldr	r2, [pc, #648]	; (80002bc <delay+0x1a>)
	movs r3, #0
 8000034:	2300      	movs	r3, #0
	b LoopCopyDataInit
 8000036:	e002      	b.n	800003e <LoopCopyDataInit>

08000038 <CopyDataInit>:

	CopyDataInit:
		ldr r4, [r2, r3]
 8000038:	58d4      	ldr	r4, [r2, r3]
		str r4, [r0, r3]
 800003a:	50c4      	str	r4, [r0, r3]
		adds r3, r3, #4
 800003c:	3304      	adds	r3, #4

0800003e <LoopCopyDataInit>:

	LoopCopyDataInit:
		adds r4, r0, r3
 800003e:	18c4      	adds	r4, r0, r3
		cmp r4, r1
 8000040:	428c      	cmp	r4, r1
		bcc CopyDataInit
 8000042:	d3f9      	bcc.n	8000038 <CopyDataInit>

	/* zero bss */
	ldr r2, =_sbss
 8000044:	4a9e      	ldr	r2, [pc, #632]	; (80002c0 <delay+0x1e>)
	ldr r4, =_ebss
 8000046:	4c9f      	ldr	r4, [pc, #636]	; (80002c4 <delay+0x22>)
	movs r3, #0
 8000048:	2300      	movs	r3, #0
	b LoopFillZerobss
 800004a:	e001      	b.n	8000050 <LoopFillZerobss>

0800004c <FillZerobss>:

	FillZerobss:
		str  r3, [r2]
 800004c:	6013      	str	r3, [r2, #0]
		adds r2, r2, #4
 800004e:	3204      	adds	r2, #4

08000050 <LoopFillZerobss>:

	LoopFillZerobss:
		cmp r2, r4
 8000050:	42a2      	cmp	r2, r4
		bcc FillZerobss
 8000052:	d3fb      	bcc.n	800004c <FillZerobss>

	bx lr
 8000054:	4770      	bx	lr

08000056 <Default_Handler>:


/* default handler */
.section .text
Default_Handler:
	b Default_Handler
 8000056:	e7fe      	b.n	8000056 <Default_Handler>

08000058 <main>:
/* main function */
.section .text
main:

	/* enable GPIOA and GPIOB clock, bit0 and bit1 on IOPENR */
	ldr r6, =RCC_IOPENR
 8000058:	4e9b      	ldr	r6, [pc, #620]	; (80002c8 <delay+0x26>)
	ldr r5, [r6]
 800005a:	6835      	ldr	r5, [r6, #0]
	movs r4, 0x3
 800005c:	2403      	movs	r4, #3
	orrs r5, r5, r4
 800005e:	4325      	orrs	r5, r4
	str r5, [r6]
 8000060:	6035      	str	r5, [r6, #0]

	/* setup PA4, PA5, PA6, PA7 for d1, d2, d3, d4 of 7seg with bits in MODER */
	ldr r6, =GPIOA_MODER
 8000062:	4e9a      	ldr	r6, [pc, #616]	; (80002cc <delay+0x2a>)
	ldr r5, [r6]
 8000064:	6835      	ldr	r5, [r6, #0]
	ldr r4, =0xFF00
 8000066:	4c9a      	ldr	r4, [pc, #616]	; (80002d0 <delay+0x2e>)
	mvns r4, r4
 8000068:	43e4      	mvns	r4, r4
	ands r5, r5, r4
 800006a:	4025      	ands	r5, r4
	ldr r4, =0x5500
 800006c:	4c99      	ldr	r4, [pc, #612]	; (80002d4 <delay+0x32>)
	orrs r5, r5, r4
 800006e:	4325      	orrs	r5, r4
	str r5, [r6]
 8000070:	6035      	str	r5, [r6, #0]
	/* setup bit1-0 as input mode for button */
	ldr r4, =0x0003
 8000072:	4c99      	ldr	r4, [pc, #612]	; (80002d8 <delay+0x36>)
	mvns r4, r4
 8000074:	43e4      	mvns	r4, r4
	ands r5, r5, r4
 8000076:	4025      	ands	r5, r4
	str r5, [r6]
 8000078:	6035      	str	r5, [r6, #0]

	/* setup PA1 for external LED with bits in MODER */
	ldr r6, =GPIOA_MODER
 800007a:	4e94      	ldr	r6, [pc, #592]	; (80002cc <delay+0x2a>)
	ldr r5, [r6]
 800007c:	6835      	ldr	r5, [r6, #0]
	ldr r4, =0xC
 800007e:	4c97      	ldr	r4, [pc, #604]	; (80002dc <delay+0x3a>)
	mvns r4, r4
 8000080:	43e4      	mvns	r4, r4
	ands r5, r5, r4
 8000082:	4025      	ands	r5, r4
	ldr r4, =0x4
 8000084:	4c96      	ldr	r4, [pc, #600]	; (80002e0 <delay+0x3e>)
	orrs r5, r5, r4
 8000086:	4325      	orrs	r5, r4
	str r5, [r6]
 8000088:	6035      	str	r5, [r6, #0]

0800008a <button_ctrl>:


button_ctrl:

	/* control the button to start generate random number */
	ldr r6, =GPIOA_IDR
 800008a:	4e96      	ldr	r6, [pc, #600]	; (80002e4 <delay+0x42>)
	ldr r5, [r6]
 800008c:	6835      	ldr	r5, [r6, #0]
	movs r4, #0x1
 800008e:	2401      	movs	r4, #1
	ands r5, r5, r4
 8000090:	4025      	ands	r5, r4

	cmp r5, #0x1
 8000092:	2d01      	cmp	r5, #1
	beq buttonOn
 8000094:	d012      	beq.n	80000bc <buttonOn>
	bne buttonOff
 8000096:	d1ff      	bne.n	8000098 <buttonOff>

08000098 <buttonOff>:


buttonOff:

	/* counting is not in progress, turn on the LED */
	ldr r6, =GPIOA_ODR
 8000098:	4e93      	ldr	r6, [pc, #588]	; (80002e8 <delay+0x46>)
	ldr r5, [r6]
 800009a:	6835      	ldr	r5, [r6, #0]
	movs r4, 0x2
 800009c:	2402      	movs	r4, #2
	orrs r5, r5, r4
 800009e:	4325      	orrs	r5, r4
	str r5, [r6]
 80000a0:	6035      	str	r5, [r6, #0]

	movs r0, 0x2
 80000a2:	2002      	movs	r0, #2
	movs r1, 0x0
 80000a4:	2100      	movs	r1, #0
	movs r2, 0x0
 80000a6:	2200      	movs	r2, #0
	movs r3, 0x4
 80000a8:	2304      	movs	r3, #4

	/* idle state, ID is shown in SSD */
	bl d1
 80000aa:	f000 f876 	bl	800019a <d1>
	bl d2
 80000ae:	f000 f87c 	bl	80001aa <d2>
	bl d3
 80000b2:	f000 f882 	bl	80001ba <d3>
	bl d4
 80000b6:	f000 f888 	bl	80001ca <d4>

	b button_ctrl
 80000ba:	e7e6      	b.n	800008a <button_ctrl>

080000bc <buttonOn>:

buttonOn:

	movs r0, DIGIT_1
 80000bc:	2003      	movs	r0, #3
	movs r1, DIGIT_2
 80000be:	2106      	movs	r1, #6
	movs r2, DIGIT_3
 80000c0:	2205      	movs	r2, #5
	movs r3, DIGIT_4
 80000c2:	2301      	movs	r3, #1

080000c4 <countdown>:

countdown:
	/* countdown is started, turn off the LED */
	ldr r6, =GPIOA_ODR
 80000c4:	4e88      	ldr	r6, [pc, #544]	; (80002e8 <delay+0x46>)
	ldr r5, [r6]
 80000c6:	6835      	ldr	r5, [r6, #0]
	ldr r4, =0x2
 80000c8:	4c88      	ldr	r4, [pc, #544]	; (80002ec <delay+0x4a>)
	mvns r4, r4
 80000ca:	43e4      	mvns	r4, r4
	ands r5, r5, r4
 80000cc:	4025      	ands	r5, r4
	str r5, [r6]
 80000ce:	6035      	str	r5, [r6, #0]

080000d0 <a>:
	/* Nested loop for countdown the digits */
	a: // 1st digit
		b: // 2nd digit
			c: // 3rd digit
				d: // 4th digit
					subs r3, #1
 80000d0:	3b01      	subs	r3, #1
					bl isButtonStillPressed // check if button is still pressed
 80000d2:	f000 f81d 	bl	8000110 <isButtonStillPressed>
					bl d1
 80000d6:	f000 f860 	bl	800019a <d1>
					bl d2
 80000da:	f000 f866 	bl	80001aa <d2>
					bl d3
 80000de:	f000 f86c 	bl	80001ba <d3>
					bl d4
 80000e2:	f000 f872 	bl	80001ca <d4>
					cmp r3, #0
 80000e6:	2b00      	cmp	r3, #0
					bge d
 80000e8:	daf2      	bge.n	80000d0 <a>

			movs r3, #9
 80000ea:	2309      	movs	r3, #9
			subs r2, #1
 80000ec:	3a01      	subs	r2, #1
			bl d3
 80000ee:	f000 f864 	bl	80001ba <d3>
			cmp r2, #0
 80000f2:	2a00      	cmp	r2, #0
			bge c
 80000f4:	daec      	bge.n	80000d0 <a>

		movs r2, #9
 80000f6:	2209      	movs	r2, #9
		subs r1, #1
 80000f8:	3901      	subs	r1, #1
		bl d2
 80000fa:	f000 f856 	bl	80001aa <d2>
		cmp r1, #0
 80000fe:	2900      	cmp	r1, #0
		bge b
 8000100:	dae6      	bge.n	80000d0 <a>

	movs r1, #9
 8000102:	2109      	movs	r1, #9
	subs r0,  #1
 8000104:	3801      	subs	r0, #1
	bl d1
 8000106:	f000 f848 	bl	800019a <d1>
	cmp r0, #0
 800010a:	2800      	cmp	r0, #0
	bne a
 800010c:	d1e0      	bne.n	80000d0 <a>
	beq display
 800010e:	d012      	beq.n	8000136 <display>

08000110 <isButtonStillPressed>:


	isButtonStillPressed:

		/* control the button for resume or pause */
		ldr r6, =GPIOA_IDR
 8000110:	4e74      	ldr	r6, [pc, #464]	; (80002e4 <delay+0x42>)
		ldr r5, [r6]
 8000112:	6835      	ldr	r5, [r6, #0]
		movs r4, #0x1
 8000114:	2401      	movs	r4, #1
		ands r5, r5, r4
 8000116:	4025      	ands	r5, r4

		cmp r5, #0x1
 8000118:	2d01      	cmp	r5, #1
		bne pause
 800011a:	d100      	bne.n	800011e <pause>
		bx lr
 800011c:	4770      	bx	lr

0800011e <pause>:

		pause:
				/* counting is not in progress, turn on the LED */
				ldr r6, =GPIOA_ODR
 800011e:	4e72      	ldr	r6, [pc, #456]	; (80002e8 <delay+0x46>)
				ldr r5, [r6]
 8000120:	6835      	ldr	r5, [r6, #0]
				movs r4, 0x2 //0010
 8000122:	2402      	movs	r4, #2
				orrs r5, r5, r4
 8000124:	4325      	orrs	r5, r4
				str r5, [r6]
 8000126:	6035      	str	r5, [r6, #0]

				/* check if there is input for counting to resume */
				ldr r6, =GPIOA_IDR
 8000128:	4e6e      	ldr	r6, [pc, #440]	; (80002e4 <delay+0x42>)
				ldr r5, [r6]
 800012a:	6835      	ldr	r5, [r6, #0]
				movs r4, #0x1
 800012c:	2401      	movs	r4, #1
				ands r5, r5, r4
 800012e:	4025      	ands	r5, r4

				cmp r5, #0x1
 8000130:	2d01      	cmp	r5, #1
				bne pause
 8000132:	d1f4      	bne.n	800011e <pause>
				bx lr
 8000134:	4770      	bx	lr

08000136 <display>:

		display:

				/* counting is not in progres, turn the LED on */
				ldr r6, =GPIOA_ODR
 8000136:	4e6c      	ldr	r6, [pc, #432]	; (80002e8 <delay+0x46>)
				ldr r5, [r6]
 8000138:	6835      	ldr	r5, [r6, #0]
				movs r4, 0x2 //0010
 800013a:	2402      	movs	r4, #2
				orrs r5, r5, r4
 800013c:	4325      	orrs	r5, r4
				str r5, [r6]
 800013e:	6035      	str	r5, [r6, #0]

			/* counting is reached 0, now show 0000 */

				/* setup PB0-5 for 7seg A to F for bits in MODER */
				ldr r6, =GPIOB_MODER
 8000140:	4e6b      	ldr	r6, [pc, #428]	; (80002f0 <delay+0x4e>)
				ldr r5, [r6]
 8000142:	6835      	ldr	r5, [r6, #0]
				bics r5, r5
 8000144:	43ad      	bics	r5, r5
				ldr r4, =0x0555
 8000146:	4c6b      	ldr	r4, [pc, #428]	; (80002f4 <delay+0x52>)
				orrs r5, r5, r4
 8000148:	4325      	orrs	r5, r4
				str r5, [r6]
 800014a:	6035      	str	r5, [r6, #0]

				/* turn on all digits PB0-5*/
				ldr r6, =GPIOB_ODR
 800014c:	4e6a      	ldr	r6, [pc, #424]	; (80002f8 <delay+0x56>)
				ldr r5, [r6]
 800014e:	6835      	ldr	r5, [r6, #0]
				movs r4, 0xC0
 8000150:	24c0      	movs	r4, #192	; 0xc0
				ands r5, r5, r4
 8000152:	4025      	ands	r5, r4
				str r5, [r6]
 8000154:	6035      	str	r5, [r6, #0]

				/* turn on d1-d2-d3-d4 */
				ldr r6, =GPIOA_ODR
 8000156:	4e64      	ldr	r6, [pc, #400]	; (80002e8 <delay+0x46>)
				ldr r5, [r6]
 8000158:	6835      	ldr	r5, [r6, #0]
				movs r4, 0xF0
 800015a:	24f0      	movs	r4, #240	; 0xf0
				orrs r5, r5, r4
 800015c:	4325      	orrs	r5, r4
				str r5, [r6]
 800015e:	6035      	str	r5, [r6, #0]

			ldr r7, =#3200000 //0000 just for 1 second
 8000160:	4f66      	ldr	r7, [pc, #408]	; (80002fc <delay+0x5a>)
			b delay1
 8000162:	e7ff      	b.n	8000164 <delay1>

08000164 <delay1>:
			delay1:
				subs r7, #1
 8000164:	3f01      	subs	r7, #1
				cmp r7, #0
 8000166:	2f00      	cmp	r7, #0
				bne delay1
 8000168:	d1fc      	bne.n	8000164 <delay1>

			/* get back to idle state */
				movs r0, 0x2
 800016a:	2002      	movs	r0, #2
				movs r1, 0x0
 800016c:	2100      	movs	r1, #0
				movs r2, 0x0
 800016e:	2200      	movs	r2, #0
				movs r3, 0x4
 8000170:	2304      	movs	r3, #4

				bl d1
 8000172:	f000 f812 	bl	800019a <d1>
				ldr r7, =#100000
 8000176:	4f62      	ldr	r7, [pc, #392]	; (8000300 <delay+0x5e>)
				b delay2
 8000178:	e00b      	b.n	8000192 <delay2>

				bl d2
 800017a:	f000 f816 	bl	80001aa <d2>
				ldr r7, =#100000
 800017e:	4f60      	ldr	r7, [pc, #384]	; (8000300 <delay+0x5e>)
				b delay2
 8000180:	e007      	b.n	8000192 <delay2>

				bl d3
 8000182:	f000 f81a 	bl	80001ba <d3>
				ldr r7, =#100000
 8000186:	4f5e      	ldr	r7, [pc, #376]	; (8000300 <delay+0x5e>)
				b delay2
 8000188:	e003      	b.n	8000192 <delay2>

				bl d4
 800018a:	f000 f81e 	bl	80001ca <d4>
				ldr r7, =#6000000
 800018e:	4f5d      	ldr	r7, [pc, #372]	; (8000304 <delay+0x62>)
				b delay2
 8000190:	e7ff      	b.n	8000192 <delay2>

08000192 <delay2>:

			delay2:
				subs r7, #1
 8000192:	3f01      	subs	r7, #1
				cmp r7, #0
 8000194:	2f00      	cmp	r7, #0
				bne delay2
 8000196:	d1fc      	bne.n	8000192 <delay2>

			b button_ctrl
 8000198:	e777      	b.n	800008a <button_ctrl>

0800019a <d1>:
/* How to display the numbers in SSD */

	/* 1- Choose the digit */

	d1:
		movs r7, r0
 800019a:	0007      	movs	r7, r0

		/* turn on d1 connected to A6 in ODR*/
		ldr r6, =GPIOA_ODR
 800019c:	4e52      	ldr	r6, [pc, #328]	; (80002e8 <delay+0x46>)
		ldr r5, [r6]
 800019e:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 80001a0:	43ad      	bics	r5, r5
		movs r4, 0x10 //0001_0000
 80001a2:	2410      	movs	r4, #16
		orrs r5, r5, r4
 80001a4:	4325      	orrs	r5, r4
		str r5, [r6]
 80001a6:	6035      	str	r5, [r6, #0]

		b cmpDigits
 80001a8:	e017      	b.n	80001da <cmpDigits>

080001aa <d2>:



	d2:
		movs r7, r1
 80001aa:	000f      	movs	r7, r1

		/* turn on d2 connected to A6 in ODR*/
		ldr r6, =GPIOA_ODR
 80001ac:	4e4e      	ldr	r6, [pc, #312]	; (80002e8 <delay+0x46>)
		ldr r5, [r6]
 80001ae:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 80001b0:	43ad      	bics	r5, r5
		movs r4, 0x20 //0010_0000
 80001b2:	2420      	movs	r4, #32
		orrs r5, r5, r4
 80001b4:	4325      	orrs	r5, r4
		str r5, [r6]
 80001b6:	6035      	str	r5, [r6, #0]

		b cmpDigits
 80001b8:	e00f      	b.n	80001da <cmpDigits>

080001ba <d3>:



	d3:
		movs r7, r2
 80001ba:	0017      	movs	r7, r2

		/* turn on d2-d3 connected to A6 in ODR*/
		ldr r6, =GPIOA_ODR
 80001bc:	4e4a      	ldr	r6, [pc, #296]	; (80002e8 <delay+0x46>)
		ldr r5, [r6]
 80001be:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 80001c0:	43ad      	bics	r5, r5
		movs r4, 0x40 //0100_0000
 80001c2:	2440      	movs	r4, #64	; 0x40
		orrs r5, r5, r4
 80001c4:	4325      	orrs	r5, r4
		str r5, [r6]
 80001c6:	6035      	str	r5, [r6, #0]

		b cmpDigits
 80001c8:	e007      	b.n	80001da <cmpDigits>

080001ca <d4>:



	d4:
		movs r7, r3
 80001ca:	001f      	movs	r7, r3

		/* turn on d4 connected to A6 in ODR*/
		ldr r6, =GPIOA_ODR
 80001cc:	4e46      	ldr	r6, [pc, #280]	; (80002e8 <delay+0x46>)
		ldr r5, [r6]
 80001ce:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 80001d0:	43ad      	bics	r5, r5
		movs r4, 0x80 //1000_0000
 80001d2:	2480      	movs	r4, #128	; 0x80
		orrs r5, r5, r4
 80001d4:	4325      	orrs	r5, r4
		str r5, [r6]
 80001d6:	6035      	str	r5, [r6, #0]

		b cmpDigits
 80001d8:	e7ff      	b.n	80001da <cmpDigits>

080001da <cmpDigits>:


	/* 2- Find the number by comparing  */

	cmpDigits:
		cmp	r7, #0
 80001da:	2f00      	cmp	r7, #0
		beq ssd0
 80001dc:	d011      	beq.n	8000202 <ssd0>

		cmp r7, #1
 80001de:	2f01      	cmp	r7, #1
		beq ssd1
 80001e0:	d017      	beq.n	8000212 <ssd1>

		cmp r7, #2
 80001e2:	2f02      	cmp	r7, #2
		beq ssd2
 80001e4:	d01d      	beq.n	8000222 <ssd2>

		cmp r7, #3
 80001e6:	2f03      	cmp	r7, #3
		beq ssd3
 80001e8:	d023      	beq.n	8000232 <ssd3>

		cmp r7, #4
 80001ea:	2f04      	cmp	r7, #4
		beq ssd4
 80001ec:	d029      	beq.n	8000242 <ssd4>

		cmp r7, #5
 80001ee:	2f05      	cmp	r7, #5
		beq ssd5
 80001f0:	d02f      	beq.n	8000252 <ssd5>

		cmp r7, #6
 80001f2:	2f06      	cmp	r7, #6
		beq ssd6
 80001f4:	d035      	beq.n	8000262 <ssd6>

		cmp r7, #7
 80001f6:	2f07      	cmp	r7, #7
		beq ssd7
 80001f8:	d03b      	beq.n	8000272 <ssd7>

		cmp r7, #8
 80001fa:	2f08      	cmp	r7, #8
		beq ssd8
 80001fc:	d041      	beq.n	8000282 <ssd8>

		cmp r7, #9
 80001fe:	2f09      	cmp	r7, #9
		beq ssd9
 8000200:	d047      	beq.n	8000292 <ssd9>

08000202 <ssd0>:


	/* 3- Go to implementation of the number*/

	ssd0:
		ldr r7, =#1000
 8000202:	4f41      	ldr	r7, [pc, #260]	; (8000308 <delay+0x66>)

		/* 0: 0,1,2,3,4,5 */
		ldr r6, =GPIOB_MODER
 8000204:	4e3a      	ldr	r6, [pc, #232]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000206:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000208:	43ad      	bics	r5, r5
		ldr r4, =0x0555 //0000_0101_0101_0101
 800020a:	4c3a      	ldr	r4, [pc, #232]	; (80002f4 <delay+0x52>)
		orrs r5, r5, r4
 800020c:	4325      	orrs	r5, r4
		str r5, [r6]
 800020e:	6035      	str	r5, [r6, #0]
		b delay
 8000210:	e047      	b.n	80002a2 <delay>

08000212 <ssd1>:

	ssd1:
		ldr r7, =#1000
 8000212:	4f3d      	ldr	r7, [pc, #244]	; (8000308 <delay+0x66>)

		/* 1: 1,2 */
		ldr r6, =GPIOB_MODER
 8000214:	4e36      	ldr	r6, [pc, #216]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000216:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000218:	43ad      	bics	r5, r5
		ldr r4, =0x0014 //0000_0000_0001_0100
 800021a:	4c3c      	ldr	r4, [pc, #240]	; (800030c <delay+0x6a>)
		orrs r5, r5, r4
 800021c:	4325      	orrs	r5, r4
		str r5, [r6]
 800021e:	6035      	str	r5, [r6, #0]
		b delay
 8000220:	e03f      	b.n	80002a2 <delay>

08000222 <ssd2>:

	ssd2:
		ldr r7, =#1000
 8000222:	4f39      	ldr	r7, [pc, #228]	; (8000308 <delay+0x66>)

		/* 2: 0,1,3,4,6 */
		ldr r6, =GPIOB_MODER
 8000224:	4e32      	ldr	r6, [pc, #200]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000226:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000228:	43ad      	bics	r5, r5
		ldr r4, =0x1145 //0001_0001_0100_0101
 800022a:	4c39      	ldr	r4, [pc, #228]	; (8000310 <delay+0x6e>)
		orrs r5, r5, r4
 800022c:	4325      	orrs	r5, r4
		str r5, [r6]
 800022e:	6035      	str	r5, [r6, #0]
		b delay
 8000230:	e037      	b.n	80002a2 <delay>

08000232 <ssd3>:

	ssd3:
		ldr r7, =#1000
 8000232:	4f35      	ldr	r7, [pc, #212]	; (8000308 <delay+0x66>)

		/*3: 0,1,2,3,6 */
		ldr r6, =GPIOB_MODER
 8000234:	4e2e      	ldr	r6, [pc, #184]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000236:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000238:	43ad      	bics	r5, r5
		ldr r4, =0x1055 //0001_0000_0101_0101
 800023a:	4c36      	ldr	r4, [pc, #216]	; (8000314 <delay+0x72>)
		orrs r5, r5, r4
 800023c:	4325      	orrs	r5, r4
		str r5, [r6]
 800023e:	6035      	str	r5, [r6, #0]
		b delay
 8000240:	e02f      	b.n	80002a2 <delay>

08000242 <ssd4>:

	ssd4:
		ldr r7, =#1000
 8000242:	4f31      	ldr	r7, [pc, #196]	; (8000308 <delay+0x66>)

		/*4: 1,2,5,6*/
		ldr r6, =GPIOB_MODER
 8000244:	4e2a      	ldr	r6, [pc, #168]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000246:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000248:	43ad      	bics	r5, r5
		ldr r4, =0x1414 //0001_0100_0001_0100
 800024a:	4c33      	ldr	r4, [pc, #204]	; (8000318 <delay+0x76>)
		orrs r5, r5, r4
 800024c:	4325      	orrs	r5, r4
		str r5, [r6]
 800024e:	6035      	str	r5, [r6, #0]
		b delay
 8000250:	e027      	b.n	80002a2 <delay>

08000252 <ssd5>:

	ssd5:
		ldr r7, =#1000
 8000252:	4f2d      	ldr	r7, [pc, #180]	; (8000308 <delay+0x66>)

		/*5: 0,2,3,5,6 */
		ldr r6, =GPIOB_MODER
 8000254:	4e26      	ldr	r6, [pc, #152]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000256:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000258:	43ad      	bics	r5, r5
		ldr r4, =0x1451 //0001_0100_0101_0001
 800025a:	4c30      	ldr	r4, [pc, #192]	; (800031c <delay+0x7a>)
		orrs r5, r5, r4
 800025c:	4325      	orrs	r5, r4
		str r5, [r6]
 800025e:	6035      	str	r5, [r6, #0]
		b delay
 8000260:	e01f      	b.n	80002a2 <delay>

08000262 <ssd6>:

	ssd6:
		ldr r7, =#1000
 8000262:	4f29      	ldr	r7, [pc, #164]	; (8000308 <delay+0x66>)

		/*6: 0,2,3,4,5,6 */
		ldr r6, =GPIOB_MODER
 8000264:	4e22      	ldr	r6, [pc, #136]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000266:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000268:	43ad      	bics	r5, r5
		ldr r4, =0x1551 //0001_0101_0101_0001
 800026a:	4c2d      	ldr	r4, [pc, #180]	; (8000320 <delay+0x7e>)
		orrs r5, r5, r4
 800026c:	4325      	orrs	r5, r4
		str r5, [r6]
 800026e:	6035      	str	r5, [r6, #0]
		b delay
 8000270:	e017      	b.n	80002a2 <delay>

08000272 <ssd7>:

	ssd7:
		ldr r7, =#1000
 8000272:	4f25      	ldr	r7, [pc, #148]	; (8000308 <delay+0x66>)

		/* 7: 0,1,2 */
		ldr r6, =GPIOB_MODER
 8000274:	4e1e      	ldr	r6, [pc, #120]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000276:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000278:	43ad      	bics	r5, r5
		ldr r4, =0x0015 //0000_0000_0001_0101
 800027a:	4c2a      	ldr	r4, [pc, #168]	; (8000324 <delay+0x82>)
		orrs r5, r5, r4
 800027c:	4325      	orrs	r5, r4
		str r5, [r6]
 800027e:	6035      	str	r5, [r6, #0]
		b delay
 8000280:	e00f      	b.n	80002a2 <delay>

08000282 <ssd8>:

	ssd8:
		ldr r7, =#1000
 8000282:	4f21      	ldr	r7, [pc, #132]	; (8000308 <delay+0x66>)

		/*8: 0,1,2,3,4,5,6 */
		ldr r6, =GPIOB_MODER
 8000284:	4e1a      	ldr	r6, [pc, #104]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000286:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000288:	43ad      	bics	r5, r5
		ldr r4, =0x1555 //0001_0101_0101_0101
 800028a:	4c27      	ldr	r4, [pc, #156]	; (8000328 <delay+0x86>)
		orrs r5, r5, r4
 800028c:	4325      	orrs	r5, r4
		str r5, [r6]
 800028e:	6035      	str	r5, [r6, #0]
		b delay
 8000290:	e007      	b.n	80002a2 <delay>

08000292 <ssd9>:

	ssd9:
		ldr r7, =#1000
 8000292:	4f1d      	ldr	r7, [pc, #116]	; (8000308 <delay+0x66>)

		/*9: 0,1,2,3,5,6 */
		ldr r6, =GPIOB_MODER
 8000294:	4e16      	ldr	r6, [pc, #88]	; (80002f0 <delay+0x4e>)
		ldr r5, [r6]
 8000296:	6835      	ldr	r5, [r6, #0]
		bics r5, r5
 8000298:	43ad      	bics	r5, r5
		ldr r4, =0x1455 //0001_0100_0101_0101
 800029a:	4c24      	ldr	r4, [pc, #144]	; (800032c <delay+0x8a>)
		orrs r5, r5, r4
 800029c:	4325      	orrs	r5, r4
		str r5, [r6]
 800029e:	6035      	str	r5, [r6, #0]
		b delay
 80002a0:	e7ff      	b.n	80002a2 <delay>

080002a2 <delay>:

	delay:
		subs r7, #1
 80002a2:	3f01      	subs	r7, #1
		cmp r7, #0
 80002a4:	2f00      	cmp	r7, #0
		bne delay
 80002a6:	d1fc      	bne.n	80002a2 <delay>
		bx lr
 80002a8:	4770      	bx	lr


	/* for(;;); */
	b .
 80002aa:	e7fe      	b.n	80002aa <delay+0x8>

	/* this should never get executed */
	nop
 80002ac:	46c0      	nop			; (mov r8, r8)
 80002ae:	0000      	.short	0x0000
	ldr r0, =_estack
 80002b0:	20002000 	.word	0x20002000
	ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
	ldr r1, =_edata
 80002b8:	20000000 	.word	0x20000000
	ldr r2, =_sidata
 80002bc:	08000338 	.word	0x08000338
	ldr r2, =_sbss
 80002c0:	20000000 	.word	0x20000000
	ldr r4, =_ebss
 80002c4:	20000000 	.word	0x20000000
	ldr r6, =RCC_IOPENR
 80002c8:	40021034 	.word	0x40021034
	ldr r6, =GPIOA_MODER
 80002cc:	50000000 	.word	0x50000000
	ldr r4, =0xFF00
 80002d0:	0000ff00 	.word	0x0000ff00
	ldr r4, =0x5500
 80002d4:	00005500 	.word	0x00005500
	ldr r4, =0x0003
 80002d8:	00000003 	.word	0x00000003
	ldr r4, =0xC
 80002dc:	0000000c 	.word	0x0000000c
	ldr r4, =0x4
 80002e0:	00000004 	.word	0x00000004
	ldr r6, =GPIOA_IDR
 80002e4:	50000010 	.word	0x50000010
	ldr r6, =GPIOA_ODR
 80002e8:	50000014 	.word	0x50000014
	ldr r4, =0x2
 80002ec:	00000002 	.word	0x00000002
				ldr r6, =GPIOB_MODER
 80002f0:	50000400 	.word	0x50000400
				ldr r4, =0x0555
 80002f4:	00000555 	.word	0x00000555
				ldr r6, =GPIOB_ODR
 80002f8:	50000414 	.word	0x50000414
			ldr r7, =#3200000 //0000 just for 1 second
 80002fc:	0030d400 	.word	0x0030d400
				ldr r7, =#100000
 8000300:	000186a0 	.word	0x000186a0
				ldr r7, =#6000000
 8000304:	005b8d80 	.word	0x005b8d80
		ldr r7, =#1000
 8000308:	000003e8 	.word	0x000003e8
		ldr r4, =0x0014 //0000_0000_0001_0100
 800030c:	00000014 	.word	0x00000014
		ldr r4, =0x1145 //0001_0001_0100_0101
 8000310:	00001145 	.word	0x00001145
		ldr r4, =0x1055 //0001_0000_0101_0101
 8000314:	00001055 	.word	0x00001055
		ldr r4, =0x1414 //0001_0100_0001_0100
 8000318:	00001414 	.word	0x00001414
		ldr r4, =0x1451 //0001_0100_0101_0001
 800031c:	00001451 	.word	0x00001451
		ldr r4, =0x1551 //0001_0101_0101_0001
 8000320:	00001551 	.word	0x00001551
		ldr r4, =0x0015 //0000_0000_0001_0101
 8000324:	00000015 	.word	0x00000015
		ldr r4, =0x1555 //0001_0101_0101_0101
 8000328:	00001555 	.word	0x00001555
		ldr r4, =0x1455 //0001_0100_0101_0101
 800032c:	00001455 	.word	0x00001455

Disassembly of section .init:

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	46c0      	nop			; (mov r8, r8)

Disassembly of section .fini:

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	46c0      	nop			; (mov r8, r8)
